(window.webpackJsonp=window.webpackJsonp||[]).push([[1],{134:function(n,e,i){i(135),i(360),i(353),n.exports=i(357)},336:function(n,e,i){var s={"./0-title.md":337,"./01-content.md":338,"./02-quiproquo.md":339,"./03-origine.md":340,"./04-definitions.md":341,"./05-feature-branching.md":343,"./06-ci-oriented.md":345,"./07-cd-oriented.md":349,"./08-conclusion.md":351,"./09-sources.md":352};function r(n){var e=o(n);return i(e)}function o(n){if(!i.o(s,n)){var e=new Error("Cannot find module '"+n+"'");throw e.code="MODULE_NOT_FOUND",e}return s[n]}r.keys=function(){return Object.keys(s)},r.resolve=o,n.exports=r,r.id=336},337:function(n,e){n.exports='<h1 id="intégration-continue">Intégration Continue</h1>\n<br/>\n\n<p><em>Une intégration continue ou de l&#39;intégration continue ?</em></p>\n<br/>\n\n<pre><code class="language-text">&quot;There are only two hard things in Computer Science: cache invalidation and naming things&quot;, Phil Karlton</code></pre>\n<p><br/><br/><br/><br/><br/><br/></p>\n<p>Marc Loupias, BBL AccorHotels du 20/06/2019</p>\n'},338:function(n,e){n.exports='<h2 id="contenu">Contenu</h2>\n<div>\n\x3c!-- contents --\x3e\n</div>'},339:function(n,e){n.exports='\x3c!-- sectionTitle: Quiproquo ? --\x3e\n\n<h2 id="quiproquo-">Quiproquo ?</h2>\n<hr>\n<header class="bg-secondary"><span>Intégration Continue </span><svg class="fa-long-arrow-right"><use xlink:href="#fa-long-arrow-right"></use></svg><span> Quiproquo ?</span></header>\n\n<p>Une intégration continue désigne un outil :</p>\n<hr>\n<header class="bg-secondary"><span>Intégration Continue </span><svg class="fa-long-arrow-right"><use xlink:href="#fa-long-arrow-right"></use></svg><span> Quiproquo ?</span></header>\n\n<p>Une intégration continue désigne un outil :</p>\n<br/>\n\n<ul>\n<li>Jenkins, TeamCity, ...</li>\n</ul>\n<hr>\n<header class="bg-secondary"><span>Intégration Continue </span><svg class="fa-long-arrow-right"><use xlink:href="#fa-long-arrow-right"></use></svg><span> Quiproquo ?</span></header>\n\n<p>Une intégration continue désigne un outil :</p>\n<br/>\n\n<ul>\n<li>Jenkins, TeamCity, ...</li>\n<li>Version cloud : TravisCI, CircleCI, ...</li>\n</ul>\n<hr>\n<header class="bg-secondary"><span>Intégration Continue </span><svg class="fa-long-arrow-right"><use xlink:href="#fa-long-arrow-right"></use></svg><span> Quiproquo ?</span></header>\n\n<p>Une intégration continue désigne un outil :</p>\n<br/>\n\n<ul>\n<li>Jenkins, TeamCity, ...</li>\n<li>Version cloud : TravisCI, CircleCI, ...</li>\n</ul>\n<br/>\n\n<p>L&#39;intégration continue désigne une pratique.</p>\n<hr>\n<header class="bg-secondary"><span>Intégration Continue </span><svg class="fa-long-arrow-right"><use xlink:href="#fa-long-arrow-right"></use></svg><span> Quiproquo ?</span></header>\n\n<p>Une intégration continue désigne un outil :</p>\n<br/>\n\n<ul>\n<li>Jenkins, TeamCity, ...</li>\n<li>Version cloud : TravisCI, CircleCI, ...</li>\n</ul>\n<br/>\n\n<p>L&#39;intégration continue désigne <strong>une pratique</strong>.</p>\n'},340:function(n,e){n.exports='\x3c!-- sectionTitle: Origine --\x3e\n\n<h2 id="origine">Origine</h2>\n<hr>\n<header class="bg-secondary"><span>Intégration Continue </span><svg class="fa-long-arrow-right"><use xlink:href="#fa-long-arrow-right"></use></svg><span> Origine</span></header>\n\n<p>Selon les sources :</p>\n<br/>\n\n<ul>\n<li>Grady Booch dans Object Oriented Design: With Applications (1991)</li>\n<li>Kent Beck dans Extreme Programming Explained (1999)</li>\n<li>...</li>\n</ul>\n<hr>\n<header class="bg-secondary"><span>Intégration Continue </span><svg class="fa-long-arrow-right"><use xlink:href="#fa-long-arrow-right"></use></svg><span> Origine</span></header>\n\n<p>Vient de l&#39;Extreme Programming :</p>\n<br/>\n\n<ul>\n<li>frequents releases</li>\n<li>code review</li>\n<li>pair programming</li>\n<li>TDD</li>\n<li>... </li>\n</ul>\n<hr>\n<header class="bg-secondary"><span>Intégration Continue </span><svg class="fa-long-arrow-right"><use xlink:href="#fa-long-arrow-right"></use></svg><span> Origine</span></header>\n\n<p>Influence fortement Agile Manifesto (2001).</p>\n<p>Kent Beck fait parti des auteurs avec Martin Fowler, Oncle Bob, Ward Cunningham, etc ...</p>\n'},341:function(n,e,i){n.exports='\x3c!-- sectionTitle: Définitions --\x3e\n\n<h2 id="définitions">Définitions</h2>\n<hr>\n<header class="bg-secondary"><span>Intégration Continue </span><svg class="fa-long-arrow-right"><use xlink:href="#fa-long-arrow-right"></use></svg><span> Définitions</span></header>\n\n<pre><code class="language-text">Continuous Integration (CI) is a development practice that requires developers \nto integrate code into a shared repository several times a day. \n\nEach check-in is then verified by an automated build, \nallowing teams to detect problems early. </code></pre>\n<br/>\n\n<p><a href="https://www.thoughtworks.com/continuous-integration">www.thoughtworks.com</a></p>\n<hr>\n<header class="bg-secondary"><span>Intégration Continue </span><svg class="fa-long-arrow-right"><use xlink:href="#fa-long-arrow-right"></use></svg><span> Définitions</span></header>\n\n<div class="wrap">\n  <div class="card-50 bg-white">\n    <img src="'+i(342)+'"></img>\n    <div class="flex-content">\n      <p>C\'est la mise en oeuvre connue la plus proche de l\'idée qu\'un logiciel ne se construit pas, il se grandit.</p>\n    </div>\n  </div>\n</div>\n\n<br/>\n\n<p>cf: Brooks, Frederick P., <a href="http://www.cs.nott.ac.uk/~pszcah/G51ISS/Documents/NoSilverBullet.html">&quot;No Silver Bullet: Essence and Accidents of Software Engineering,&quot;</a> Computer, Vol. 20, No. 4 (April 1987) pp. 10-19. </p>\n<hr>\n<header class="bg-secondary"><span>Intégration Continue </span><svg class="fa-long-arrow-right"><use xlink:href="#fa-long-arrow-right"></use></svg><span> Définitions</span></header>\n\n<h3 id="prérequis">Prérequis</h3>\n<br/>\n\n<div class="content-center">\n\n<ul class="flexblock specs">\n<li>\n<blockquote class="text-quote">\nYou should be able to walk up to the project with a virgin machine, do a checkout, and be able to fully build the system.\n</blockquote>\n</li>\n\n<li>\n<blockquote class="text-quote">\nContinuous Integration assumes a high degree of tests which are automated into the software.\n</blockquote>\n</li>\n\n<li>\n<blockquote class="text-quote">\nYou must put everything required for a build in the source control system.\n</blockquote>\n</li>\n</ul>\n\n</div>\n\n<hr>\n<header class="bg-secondary"><span>Intégration Continue </span><svg class="fa-long-arrow-right"><use xlink:href="#fa-long-arrow-right"></use></svg><span> Définitions</span></header>\n\n<h3 id="prérequis-1">Prérequis</h3>\n<br/>\n\n<p>Traduit pour le monde JavaScript :</p>\n<br/>\n\n<pre><code class="language-bash">$ git clone https://github.com/robert/killer-app.git &amp;&amp; cd killer-app/\n$ npm ci\n$ npm build\n$ npm start\n$ npm test</code></pre>\n<br/>\n\n<ul>\n<li><code>npm ci</code> utilise strictement le <code>package-lock.json</code> (<code>npm &gt;= 5.7</code>).</li>\n<li>les tests unitaires (uniquement) peuvent être exécutés avant le build.</li>\n</ul>\n<hr>\n<header class="bg-secondary"><span>Intégration Continue </span><svg class="fa-long-arrow-right"><use xlink:href="#fa-long-arrow-right"></use></svg><span> Définitions</span></header>\n\n<h3 id="etapes-">Etapes :</h3>\n<br/>\n\n<ul class="flexblock steps">\n  <li>\n    <h2>commit</h2>\n    <p>écrire une révision en local</p>\n  </li>\n  <li>\n    <div class="process step-2"></div>\n    <h2>build</h2>\n    <p>build un livrable en local et exécuter tous les tests</p>\n  </li>\n  <li>\n    <div class="process step-3"></div>\n    <h2>pull master</h2>\n    <p>tirer les modifs des autres devs du trunk et rejouer build + tests</p>\n  </li>\n</ul>\n\n<br/>\n\n<ul class="flexblock steps">\n  <li>\n    <h2>push trigger CI</h2>\n    <p>pousser ce qui trigger l\'outil de CI qui fait de son côté build + tests</p>\n  </li>\n  <li>\n    <div class="process step-2"></div>\n    <h2>merge dans le trunk</h2>\n    <p>si job OK alors la révision est mergée.</p>\n  </li>\n  <li>\n    <div class="process step-3"></div>\n    <h2>deploy</h2>\n    <p>La révision peut être déployée dans un environnement</p>\n  </li>\n</ul>\n\n<br/>\n\n<p>Ces étapes sont répétées plusieurs fois <strong>par jour</strong> pour chaque développeur.</p>\n<hr>\n<header class="bg-secondary"><span>Intégration Continue </span><svg class="fa-long-arrow-right"><use xlink:href="#fa-long-arrow-right"></use></svg><span> Définitions</span></header>\n\n<h3 id="quels-impacts-sur-la-gestion-du-code-source-">Quels impacts sur la gestion du code source ?</h3>\n<hr>\n<header class="bg-secondary"><span>Intégration Continue </span><svg class="fa-long-arrow-right"><use xlink:href="#fa-long-arrow-right"></use></svg><span> Définitions</span></header>\n\n<h3 id="quels-impacts-sur-la-gestion-du-code-source--1">Quels impacts sur la gestion du code source ?</h3>\n<br/>\n\n<p>On va parler Git.</p>\n<br/>\n\n<ul>\n<li><em>Comment intégrer les contributions ?</em></li>\n<li><em>Comment organiser l&#39;intégration des contributions ?</em></li>\n</ul>\n<hr>\n<header class="bg-secondary"><span>Intégration Continue </span><svg class="fa-long-arrow-right"><use xlink:href="#fa-long-arrow-right"></use></svg><span> Définitions</span></header>\n\n<h4 id="comment-intégrer-les-contributions-">Comment intégrer les contributions ?</h4>\n<br/>\n\n<p>Avec une <strong>branche d&#39;intégration</strong>.</p>\n<br/>\n\n<ul>\n<li>Via une opération de fusion (<code>merge</code>) de la branche de travail vers la branche d&#39;intégration.</li>\n<li>La branche d&#39;intégration est désignée sous le terme de &quot;trunk&quot; (tronc) sous SVN.</li>\n<li>Sous Git elle est nommée par défaut <code>master</code>, parfois <code>develop</code> selon le workflow utilisé.</li>\n<li>C&#39;est le tronc de l&#39;arbre des commits.</li>\n</ul>\n<hr>\n<header class="bg-secondary"><span>Intégration Continue </span><svg class="fa-long-arrow-right"><use xlink:href="#fa-long-arrow-right"></use></svg><span> Définitions</span></header>\n\n<h4 id="comment-organiser-lintégration-des-contributions-">Comment organiser l&#39;intégration des contributions ?</h4>\n<br/>\n\n<p>Avec un <strong>workflow</strong>.</p>\n<br/>\n\n<p>Les plus courants :</p>\n<br/>\n\n<ul>\n<li>Le feature branching à la papa (GitFlow)</li>\n<li>Continuous Integration Oriented (trunk-based dev)</li>\n<li>Continuous Delivery Oriented (GitHub/GitLab Flow)</li>\n</ul>\n'},342:function(n,e,i){n.exports=i.p+"b55f3223ac80847b6f7bfbbcbf2fa2e5.png"},343:function(n,e,i){n.exports='\x3c!-- sectionTitle: Feature Branching (GitFlow) --\x3e\n\n<h2 id="feature-branching-gitflow">Feature Branching (GitFlow)</h2>\n<hr>\n<header class="bg-secondary"><span>Intégration Continue </span><svg class="fa-long-arrow-right"><use xlink:href="#fa-long-arrow-right"></use></svg><span> Feature Branching (GitFlow)</span></header>\n\n<h3 id="principes-de-base">Principes de base</h3>\n<p><a href="https://nvie.com/posts/a-successful-git-branching-model/">GitFlow</a></p>\n<div class="wrap">\n  <div class="card-50 bg-white">\n    <img src="'+i(344)+'" height="600" width="600"></img>\n    <div class="flex-content">\n      <ul class="flexblock specs">\n        <li><p>1 branche <code>=</code> 1 feature</p></li>\n        <li><p>la branche de collaboration est <code>develop</code>, elle n\'est pas déployable</p></li>\n        <li><p>on merge dans <code>develop</code> quand PR terminé</p></li>\n        <li><p>release candidate sur release branch (bugfix QA only)</p></li>\n        <li><p><code>master</code> accueille les tags des livrables (hoftfix prod only)</p></li>\n      </ul>\n    </div>\n  </div>\n</div>\n\n<hr>\n<header class="bg-secondary"><span>Intégration Continue </span><svg class="fa-long-arrow-right"><use xlink:href="#fa-long-arrow-right"></use></svg><span> Feature Branching (GitFlow)</span></header>\n\n<h3 id="gestion-du-scope-fonctionnel">Gestion du scope fonctionnel</h3>\n<br/>\n\n<ul>\n<li><code>develop</code> ne contient que le scope de la future release</li>\n<li>on freeze les PR jusqu&#39;à création branche de release </li>\n<li>la branche de release prépare la MEP (QA)</li>\n</ul>\n<hr>\n<header class="bg-secondary"><span>Intégration Continue </span><svg class="fa-long-arrow-right"><use xlink:href="#fa-long-arrow-right"></use></svg><span> Feature Branching (GitFlow)</span></header>\n\n<h3 id="gestion-des-mep">Gestion des MEP</h3>\n<br/>\n\n<ul>\n<li>tags de prod créés sur <code>master</code></li>\n<li>hotfix branch créées depuis les tags de prod</li>\n<li>on déploie donc depuis <code>master</code> et pas depuis la branche d&#39;intégration (<code>develop</code>)</li>\n</ul>\n<hr>\n<header class="bg-secondary"><span>Intégration Continue </span><svg class="fa-long-arrow-right"><use xlink:href="#fa-long-arrow-right"></use></svg><span> Feature Branching (GitFlow)</span></header>\n\n<h3 id="avantages">Avantages</h3>\n<br/>\n\n<ul>\n<li>on est pas exposé au WIP des autres</li>\n<li>on expose pas son WIP</li>\n<li>gestion facile pour le dev de base jusqu&#39;au merge</li>\n<li>gestion débutants facile</li>\n</ul>\n<hr>\n<header class="bg-secondary"><span>Intégration Continue </span><svg class="fa-long-arrow-right"><use xlink:href="#fa-long-arrow-right"></use></svg><span> Feature Branching (GitFlow)</span></header>\n\n<h3 id="inconvénients">Inconvénients</h3>\n<br/>\n\n<ul>\n<li>confusion dans les targets des merges fréquentes \n(vers <code>develop</code> ? <code>release/*</code> ? <code>hotfix/*</code> ? <code>master</code> ?)</li>\n<li>faible fréquence d&#39;intégration :<ul>\n<li>code review plus longues et difficiles</li>\n<li>conflits plus fréquents et plus complexes</li>\n<li>régressions visibles plus tard</li>\n<li>embouteillages en fin de sprint</li>\n</ul>\n</li>\n<li>gestion du scope fonctionnel rigide :<ul>\n<li>peut entrainer période freeze des PR avant création branche de release</li>\n<li>difficile de dev plusieurs itérations en parallèle (plusieurs <code>develop</code>)</li>\n<li>très difficile de changer de scope fonctionnel rapidement</li>\n</ul>\n</li>\n<li>ne scale pas</li>\n<li>gestion lourde pour le Repo Owner (nombreux reports de code)</li>\n</ul>\n<hr>\n<header class="bg-secondary"><span>Intégration Continue </span><svg class="fa-long-arrow-right"><use xlink:href="#fa-long-arrow-right"></use></svg><span> Feature Branching (GitFlow)</span></header>\n\n<h3 id="cercle-vicieux">Cercle vicieux</h3>\n<br/>\n\n<p>Certains inconvénients entrainent d&#39;autres inconvénients :</p>\n<br/>\n\n<ul>\n<li>conflits fréquents et difficiles entrainent peur de la refacto entraine baisse qualité</li>\n<li>régressions détectées plus tard entrainent baisse qualité et baisse productivité</li>\n<li>embouteillages fin sprint entrainent rush et stress</li>\n<li>difficultés à dev en parallèle des versions mal comprises du métier<ul>\n<li>incompréhension des causes techniques</li>\n<li>incompréhension des conséquences des choix de scopage des releases par le métier \n(cf <a href="https://trunkbaseddevelopment.com/concurrent-development-of-consecutive-releases/">Concurrent development of consecutive releases - trunkbaseddevelopment.com</a>)</li>\n</ul>\n</li>\n<li>etc ... </li>\n</ul>\n'},344:function(n,e,i){n.exports=i.p+"89207e5ae3f97a432a2700a93cf9a3f1.png"},345:function(n,e,i){n.exports='\x3c!-- sectionTitle: Continuous Integration Oriented (Trunk-based Dev) --\x3e\n\n<h2 id="continuous-integration-oriented-trunk-based-dev">Continuous Integration Oriented (Trunk-based Dev)</h2>\n<hr>\n<header class="bg-secondary"><span>Intégration Continue </span><svg class="fa-long-arrow-right"><use xlink:href="#fa-long-arrow-right"></use></svg><span> Continuous Integration Oriented (Trunk-based Dev)</span></header>\n\n<h3 id="principes-de-base">Principes de base</h3>\n<p><a href="http://kean.github.io/post/trunk-based-development">Trunk-Based Development</a></p>\n<div class="wrap">\n  <div class="card-50 bg-white">\n    <img src="'+i(346)+'"></img>\n    <div class="flex-content">\n      <ul class="flexblock specs">\n        <li><p>1 branche <code>!=</code> 1 feature, 1 branche <code>=</code> 1 petite révision (2h de taf, 2j maxi)</p></li>\n        <li><p>on merge ASAP</p></li>\n        <li><p>une seule branche de collaboration (le trunk / <code>master</code>)</p></li>\n        <li><p><code>master</code> est toujours stable et déployable</p></li>\n        <li><p>chaque révision est déployée en env de test, recette, QA, ...</p></li>\n      </ul>\n    </div>\n  </div>\n</div>\n\n<hr>\n<header class="bg-secondary"><span>Intégration Continue </span><svg class="fa-long-arrow-right"><use xlink:href="#fa-long-arrow-right"></use></svg><span> Continuous Integration Oriented (Trunk-based Dev)</span></header>\n\n<h3 id="gestion-du-scope-fonctionnel-">Gestion du scope fonctionnel :</h3>\n<br/>\n\n<p>Via feature toggle (ou flipping, ou flags)</p>\n<br/>\n\n<ul>\n<li>1er commit d&#39;une feature implémente le toggle</li>\n<li>généralement au runtime mais peut aussi être réalisé au build</li>\n<li>peuvent servir pour A/B testing</li>\n<li>on merge avec tous les toggles activés</li>\n<li>on peut scoper les releases via toggle</li>\n</ul>\n<br/>\n\n<p>Quand une feature est OK, le toggle est supprimé de la codebase.\nSinon c&#39;est plus du toggle mais de la configuration, donc une feature en soi.</p>\n<br/>\n\n<p><strong>La complexité de la gestion des branches est transférée dans la complexité applicative.</strong></p>\n<hr>\n<header class="bg-secondary"><span>Intégration Continue </span><svg class="fa-long-arrow-right"><use xlink:href="#fa-long-arrow-right"></use></svg><span> Continuous Integration Oriented (Trunk-based Dev)</span></header>\n\n<h3 id="gestion-des-mep">Gestion des MEP</h3>\n<p><img src="'+i(347)+'"></img></p>\n<br/>\n\n<ul>\n<li>MEP a échéances fixes<ul>\n<li>on crée release branch depuis <code>master</code> pour préparer les MEP (QA)</li>\n<li>on fix les bugs levés par QA sur <code>master</code></li>\n<li>on <strong>cherry-pick</strong> de <code>master</code> vers release-branch</li>\n</ul>\n</li>\n<li>hotfix<ul>\n<li>on crée une release branch depuis le dernier tag en prod</li>\n<li>on dev le hotfix sur <code>master</code></li>\n<li>on <strong>cherry-pick</strong> de <code>master</code> vers release-branch</li>\n</ul>\n</li>\n<li>on peut MEP quand on veut (Continuous Delivery)</li>\n<li>on peut MEP à chaque révision (Continuous Deployment)<ul>\n<li>stade ultime du chemin DevOps</li>\n<li>un commit mergé dans <code>master</code> va automatiquement en prod si pipeline OK</li>\n</ul>\n</li>\n</ul>\n<hr>\n<header class="bg-secondary"><span>Intégration Continue </span><svg class="fa-long-arrow-right"><use xlink:href="#fa-long-arrow-right"></use></svg><span> Continuous Integration Oriented (Trunk-based Dev)</span></header>\n\n<h3 id="prérequis">Prérequis</h3>\n<br/>\n\n<ul>\n<li>suppose automatisation totale des tests (acceptance inclus)</li>\n<li>suppose une infra solide</li>\n<li>nécessite provisionning d&#39;environnement</li>\n<li>feature toggle (ou flipping, ou flags) obligatoire</li>\n</ul>\n<hr>\n<header class="bg-secondary"><span>Intégration Continue </span><svg class="fa-long-arrow-right"><use xlink:href="#fa-long-arrow-right"></use></svg><span> Continuous Integration Oriented (Trunk-based Dev)</span></header>\n\n<h3 id="avantages">Avantages</h3>\n<br/>\n\n<ul>\n<li>intégration continue effective</li>\n<li>facile de pousser/récupérer du travail transverse</li>\n<li>code review rapides et faciles</li>\n<li>conflits petits et faciles si pas inexistants</li>\n<li>régressions visibles immédiatement</li>\n<li>fluide (pas d&#39;emboutillage, pas de période de freeze)</li>\n<li>scalabilité</li>\n<li>très facile de changer de scope fonctionnel à la demande</li>\n</ul>\n<hr>\n<header class="bg-secondary"><span>Intégration Continue </span><svg class="fa-long-arrow-right"><use xlink:href="#fa-long-arrow-right"></use></svg><span> Continuous Integration Oriented (Trunk-based Dev)</span></header>\n\n<h3 id="inconvénients">Inconvénients</h3>\n<br/>\n\n<ul>\n<li>historique dégueux (impossible de générer un CHANGELOG lisible)</li>\n<li>feature flipping pénible à gérer<ul>\n<li>augmente la complexité</li>\n<li>augmente la combinatoire des tests</li>\n<li>gérer les différents environnements</li>\n</ul>\n</li>\n<li>nécessite une équipe majoritairement senior sur la pratique</li>\n</ul>\n<hr>\n<header class="bg-secondary"><span>Intégration Continue </span><svg class="fa-long-arrow-right"><use xlink:href="#fa-long-arrow-right"></use></svg><span> Continuous Integration Oriented (Trunk-based Dev)</span></header>\n\n<h3 id="devops">DevOps</h3>\n<p>Point de vue DevOps c&#39;est aujourd&#39;hui l&#39;état de l&#39;art en matière de gestion de codebase.</p>\n<br/>\n\n<div class="wrap">\n  <div class="card-50 bg-white">\n    <img src="'+i(348)+'" width="241" height="350"></img>\n    <div class="flex-content">\n      <p>Cf "Accelerate, The Science of Lean Software and DevOps: Building and Scaling High Performing Technology Organizations"</p>\n      <p>27 mars 2018</p>\n      <p>https://itrevolution.com/book/accelerate/</p>      \n    </div>\n  </div>\n</div>\n'},346:function(n,e,i){n.exports=i.p+"9b2192db0d4cda5524ebfb9ac24696ac.png"},347:function(n,e,i){n.exports=i.p+"ded26df026743ba6c9b42f6f0abee3df.png"},348:function(n,e,i){n.exports=i.p+"8bdefb0395d9d916aece99ddb715050f.jpg"},349:function(n,e,i){n.exports='\x3c!-- sectionTitle: Continuous Delivery Oriented (GitHub/GitLab Flow) --\x3e\n\n<h2 id="continuous-delivery-oriented-githubgitlab-flow">Continuous Delivery Oriented (GitHub/GitLab Flow)</h2>\n<hr>\n<header class="bg-secondary"><span>Intégration Continue </span><svg class="fa-long-arrow-right"><use xlink:href="#fa-long-arrow-right"></use></svg><span> Continuous Delivery Oriented (GitHub/GitLab Flow)</span></header>\n\n<h3 id="principes-de-base">Principes de base</h3>\n<p><a href="http://scottchacon.com/2011/08/31/github-flow.html">GitHub Flow</a> / <a href="https://docs.gitlab.com/ee/workflow/gitlab_flow.html">GitLab Flow</a></p>\n<p><img src="'+i(350)+'"></img></p>\n<ul>\n<li>1 branche <code>=</code> 1 feature</li>\n<li>une seule branche de collaboration (le trunk / <code>master</code>)</li>\n<li><code>master</code> est toujours stable et déployable</li>\n<li>on ouvre la PR dès le début</li>\n<li>on pousse régulièrement sur <code>origin</code></li>\n<li>intégration continue <strong>inversée</strong> (on tire depuis <code>master</code> vers PR)</li>\n<li>quand review ok :<ul>\n<li>on verrouille <code>master</code> via un bot sur slack</li>\n<li>on merge <code>master</code> dans feature branch</li>\n<li>on déploie <strong>en prod</strong></li>\n<li>on teste, on évalue les métriques, etc ...</li>\n</ul>\n</li>\n<li>quand test OK on merge la PR et on libère <code>master</code></li>\n<li>si test KO on rollback la prod et on libère <code>master</code></li>\n</ul>\n<hr>\n<header class="bg-secondary"><span>Intégration Continue </span><svg class="fa-long-arrow-right"><use xlink:href="#fa-long-arrow-right"></use></svg><span> Continuous Delivery Oriented (GitHub/GitLab Flow)</span></header>\n\n<h3 id="gestion-du-scope-fonctionnel">Gestion du scope fonctionnel</h3>\n<br/>\n\n<ul>\n<li>si MEP scopée les features non voulues restent en PR</li>\n<li>pas de scope fonctionnel, on pousse <strong>en prod</strong> au fil de l&#39;eau</li>\n</ul>\n<br/>\n\n<p>Les features sont seulement priorisées dans le backlog, et : <em>It&#39;s done when it&#39;s done</em>.</p>\n<hr>\n<header class="bg-secondary"><span>Intégration Continue </span><svg class="fa-long-arrow-right"><use xlink:href="#fa-long-arrow-right"></use></svg><span> Continuous Delivery Oriented (GitHub/GitLab Flow)</span></header>\n\n<h3 id="gestion-des-mep">Gestion des MEP</h3>\n<br/>\n\n<ul>\n<li>pas de releases définies à l&#39;avance, on déploie ASAP <strong>en prod</strong></li>\n<li>si problème rollback</li>\n</ul>\n<hr>\n<header class="bg-secondary"><span>Intégration Continue </span><svg class="fa-long-arrow-right"><use xlink:href="#fa-long-arrow-right"></use></svg><span> Continuous Delivery Oriented (GitHub/GitLab Flow)</span></header>\n\n<h3 id="prérequis">Prérequis</h3>\n<br/>\n\n<ul>\n<li>suppose automatisation totale des tests (acceptance inclus)</li>\n<li>suppose une infra solide</li>\n<li>nécessite provisionning d&#39;environnement</li>\n<li>GitLab Flow propose des variances\n(branches d&#39;environnements pour déploiement en fast-forward only, permet QA/recette manuelle avant passage prod)</li>\n<li>GitHub Flow suppose que les devs aient la main sur les outils de monitoring et de déploiement <strong>de prod</strong></li>\n</ul>\n<hr>\n<header class="bg-secondary"><span>Intégration Continue </span><svg class="fa-long-arrow-right"><use xlink:href="#fa-long-arrow-right"></use></svg><span> Continuous Delivery Oriented (GitHub/GitLab Flow)</span></header>\n\n<h3 id="avantages">Avantages</h3>\n<br/>\n\n<ul>\n<li>très simple à gérer pour les devs</li>\n<li>code review au coeur du workflow</li>\n<li>scalabilité</li>\n<li>pas de feature flipping complexe à gérer</li>\n</ul>\n<hr>\n<header class="bg-secondary"><span>Intégration Continue </span><svg class="fa-long-arrow-right"><use xlink:href="#fa-long-arrow-right"></use></svg><span> Continuous Delivery Oriented (GitHub/GitLab Flow)</span></header>\n\n<h3 id="inconvénients">Inconvénients</h3>\n<ul>\n<li>historique dégueux si merge policy <code>&gt;</code> rebase policy</li>\n<li>infra très avancée + beaucoup de tooling obligatoire</li>\n<li>en rupture avec la culture d&#39;entreprise classique<ul>\n<li>suppression des silos dev / qa / fonctionnels / managers / ops</li>\n<li>pas de scope fonctionnel</li>\n<li>c&#39;est top mais mission impossible à faire accepter</li>\n</ul>\n</li>\n</ul>\n'},350:function(n,e,i){n.exports=i.p+"f8682c38f8d309a64569ad37112a0aa4.png"},351:function(n,e){n.exports='\x3c!-- sectionTitle: Conclusion --\x3e\n\n<h2 id="conclusion">Conclusion</h2>\n<hr>\n<header class="bg-secondary"><span>Intégration Continue </span><svg class="fa-long-arrow-right"><use xlink:href="#fa-long-arrow-right"></use></svg><span> Conclusion</span></header>\n\n<div class="flex-content">\n  <ul class="flexblock specs">\n    <li>\n      <h2>L\'intégration continue (la pratique) a une définition très précise</h2>\n      <p>On merge tout le temps, même quand pas terminé</p>\n    </li>\n    <li>\n      <h2>Difficile à mettre en oeuvre</h2>\n      <p>Nécessite</p>\n      <p>→ un gros investissement d\'infrastructure (ou de dépendre de services tiers)</p>\n      <p>→ un haut degré d\'automatisation des tests (pas de test manuel)</p>\n      <p>→ de gros changements de culture d\'entreprise</p>\n    </li>\n    <li>\n      <h2>Au coeur de la culture DevOps</h2>\n      <p>Les GitHub/GitLab flow sont plus orientés CD que CI au sens strict.</p>\n      <p>Les GAFAM et les licornes de la Silicon Valley l\'utilisent tous : Google, Amazon, Microsoft, GitHub, etc ...</p>\n      <p>En France des sociétés comme BlablaCar, LesFurets, Doctolib, ...</p>\n      <p>En France aucun grand compte à ma connaissance (sauf SoGé en finance de marché)</p>\n    </li>\n    <li>\n      <h2>Souvent des projets web BtoC</h2>\n      <p>Releases fixes scopées pas utiles.</p>\n      <p>Prio TTM le plus court possible.</p>\n    </li>\n    <li>\n      <h2>Les projets opensource sont peu concernés</h2>\n      <p>Se tournent plutôt vers du GitHub/GitLab Flow réadapté.</p>\n      <p>Aucun sens de livrer 35 versions d\'une lib par jour.</p>\n      <p>Travail effectif rarement en fulltime.</p>\n    </li>\n  </ul>\n</div>\n\n<p><strong>Tout démarre à partir du workflow Git</strong></p>\n'},352:function(n,e){n.exports='\x3c!-- sectionTitle: Sources --\x3e\n\n<h1 id="sources">Sources</h1>\n<ul>\n<li><a href="https://www.thoughtworks.com/continuous-integration">www.thoughtworks.com</a></li>\n<li><a href="https://www.martinfowler.com/articles/continuousIntegration.html">Continuous Integration, Martin Fowler - 01/05/2006</a></li>\n<li><a href="https://nvie.com/posts/a-successful-git-branching-model/">A successful Git branching model, Vincent Driessen - 05/01/2010</a></li>\n<li><a href="http://kean.github.io/post/trunk-based-development">Trunk-Based Development, Alexander Grebenyuk - 23/03/2018</a></li>\n<li><a href="https://trunkbaseddevelopment.com/">trunkbaseddevelopment.com - 2017</a></li>\n<li><a href="https://less.works/less/technical-excellence/continuous-integration.html">Continuous Integration, LeSS Company - 2014-2019</a></li>\n<li><a href="http://scottchacon.com/2011/08/31/github-flow.html">GitHub Flow - Scott Chacon - 31/08/2011</a> / <a href="https://guides.github.com/introduction/flow/">Voir aussi</a> / <a href="https://www.youtube.com/watch?v=jCwzf9adAtE">En vidéo, Alain Hélaïli@Devoxx2016</a></li>\n<li><a href="https://docs.gitlab.com/ee/workflow/gitlab_flow.html">Introduction to GitLab Flow - Documentation GitLab</a></li>\n</ul>\n'},353:function(n,e,i){"use strict";i.r(e);i(354),i(355)},358:function(n,e,i){var s=i(359);"string"==typeof s&&(s=[[n.i,s,""]]);var r={hmr:!0,transform:void 0,insertInto:void 0};i(46)(s,r);s.locals&&(n.exports=s.locals)},359:function(n,e,i){}},[[134,3,5]],[0]]);